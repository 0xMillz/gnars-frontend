/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface SkateContractV2AuctionHouseV2Interface
  extends utils.Interface {
  functions: {
    "SKATE_OG_ADDRESS()": FunctionFragment;
    "auction()": FunctionFragment;
    "auctionCounter()": FunctionFragment;
    "baseAuctionTime()": FunctionFragment;
    "claimGnars(uint256[])": FunctionFragment;
    "createBid(uint256,uint8,uint8)": FunctionFragment;
    "dao()": FunctionFragment;
    "gnars()": FunctionFragment;
    "gnarsClaimedFor(uint256)": FunctionFragment;
    "initialize(address,address,address,address,uint256,uint8,uint256,uint256,uint256)": FunctionFragment;
    "minBidIncrementPercentage()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "remainingTime()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "reservePrice()": FunctionFragment;
    "setMinBidIncrementPercentage(uint8)": FunctionFragment;
    "setReservePrice(uint256)": FunctionFragment;
    "setSkateDaoAddresses(address,address)": FunctionFragment;
    "setTimeBuffer(uint256)": FunctionFragment;
    "settleAuction()": FunctionFragment;
    "settleCurrentAndCreateNewAuction()": FunctionFragment;
    "skate()": FunctionFragment;
    "timeBuffer()": FunctionFragment;
    "timeDoublingCount()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "weth()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "SKATE_OG_ADDRESS"
      | "auction"
      | "auctionCounter"
      | "baseAuctionTime"
      | "claimGnars"
      | "createBid"
      | "dao"
      | "gnars"
      | "gnarsClaimedFor"
      | "initialize"
      | "minBidIncrementPercentage"
      | "owner"
      | "pause"
      | "paused"
      | "remainingTime"
      | "renounceOwnership"
      | "reservePrice"
      | "setMinBidIncrementPercentage"
      | "setReservePrice"
      | "setSkateDaoAddresses"
      | "setTimeBuffer"
      | "settleAuction"
      | "settleCurrentAndCreateNewAuction"
      | "skate"
      | "timeBuffer"
      | "timeDoublingCount"
      | "transferOwnership"
      | "unpause"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "weth"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "SKATE_OG_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "auction", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "auctionCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseAuctionTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimGnars",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createBid",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "dao", values?: undefined): string;
  encodeFunctionData(functionFragment: "gnars", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "gnarsClaimedFor",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "minBidIncrementPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "remainingTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reservePrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMinBidIncrementPercentage",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setReservePrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSkateDaoAddresses",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTimeBuffer",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "settleAuction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "settleCurrentAndCreateNewAuction",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "skate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "timeBuffer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timeDoublingCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "SKATE_OG_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "auction", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "auctionCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseAuctionTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimGnars", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createBid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dao", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gnars", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "gnarsClaimedFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minBidIncrementPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "remainingTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reservePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinBidIncrementPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReservePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSkateDaoAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTimeBuffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleCurrentAndCreateNewAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "skate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "timeBuffer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "timeDoublingCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "AuctionBid(uint256,address,uint256,uint256)": EventFragment;
    "AuctionCreated(uint256,uint256,uint256,uint256)": EventFragment;
    "AuctionExtended(uint256,uint256)": EventFragment;
    "AuctionMinBidIncrementPercentageUpdated(uint256)": EventFragment;
    "AuctionReservePriceUpdated(uint256)": EventFragment;
    "AuctionSettled(uint256,address,uint256,uint256)": EventFragment;
    "AuctionTimeBufferUpdated(uint256)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "OGGnarClaimed(uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "SkateDaoAddressesUpdated(address,address)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionBid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionExtended"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AuctionMinBidIncrementPercentageUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionReservePriceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionSettled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionTimeBufferUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OGGnarClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SkateDaoAddressesUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface AuctionBidEventObject {
  gnarId: BigNumber;
  sender: string;
  value: BigNumber;
  timestamp: BigNumber;
}
export type AuctionBidEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  AuctionBidEventObject
>;

export type AuctionBidEventFilter = TypedEventFilter<AuctionBidEvent>;

export interface AuctionCreatedEventObject {
  gnarId: BigNumber;
  startTimestamp: BigNumber;
  endTimestamp: BigNumber;
  timestamp: BigNumber;
}
export type AuctionCreatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  AuctionCreatedEventObject
>;

export type AuctionCreatedEventFilter = TypedEventFilter<AuctionCreatedEvent>;

export interface AuctionExtendedEventObject {
  gnarId: BigNumber;
  endTime: BigNumber;
}
export type AuctionExtendedEvent = TypedEvent<
  [BigNumber, BigNumber],
  AuctionExtendedEventObject
>;

export type AuctionExtendedEventFilter = TypedEventFilter<AuctionExtendedEvent>;

export interface AuctionMinBidIncrementPercentageUpdatedEventObject {
  minBidIncrementPercentage: BigNumber;
}
export type AuctionMinBidIncrementPercentageUpdatedEvent = TypedEvent<
  [BigNumber],
  AuctionMinBidIncrementPercentageUpdatedEventObject
>;

export type AuctionMinBidIncrementPercentageUpdatedEventFilter =
  TypedEventFilter<AuctionMinBidIncrementPercentageUpdatedEvent>;

export interface AuctionReservePriceUpdatedEventObject {
  reservePrice: BigNumber;
}
export type AuctionReservePriceUpdatedEvent = TypedEvent<
  [BigNumber],
  AuctionReservePriceUpdatedEventObject
>;

export type AuctionReservePriceUpdatedEventFilter =
  TypedEventFilter<AuctionReservePriceUpdatedEvent>;

export interface AuctionSettledEventObject {
  gnarId: BigNumber;
  winner: string;
  amount: BigNumber;
  timestamp: BigNumber;
}
export type AuctionSettledEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  AuctionSettledEventObject
>;

export type AuctionSettledEventFilter = TypedEventFilter<AuctionSettledEvent>;

export interface AuctionTimeBufferUpdatedEventObject {
  timeBuffer: BigNumber;
}
export type AuctionTimeBufferUpdatedEvent = TypedEvent<
  [BigNumber],
  AuctionTimeBufferUpdatedEventObject
>;

export type AuctionTimeBufferUpdatedEventFilter =
  TypedEventFilter<AuctionTimeBufferUpdatedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface OGGnarClaimedEventObject {
  ogGnarId: BigNumber;
  timestamp: BigNumber;
}
export type OGGnarClaimedEvent = TypedEvent<
  [BigNumber, BigNumber],
  OGGnarClaimedEventObject
>;

export type OGGnarClaimedEventFilter = TypedEventFilter<OGGnarClaimedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface SkateDaoAddressesUpdatedEventObject {
  skate: string;
  dao: string;
}
export type SkateDaoAddressesUpdatedEvent = TypedEvent<
  [string, string],
  SkateDaoAddressesUpdatedEventObject
>;

export type SkateDaoAddressesUpdatedEventFilter =
  TypedEventFilter<SkateDaoAddressesUpdatedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface SkateContractV2AuctionHouseV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SkateContractV2AuctionHouseV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    SKATE_OG_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    auction(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        number,
        number,
        boolean
      ] & {
        gnarId: BigNumber;
        amount: BigNumber;
        startTimestamp: BigNumber;
        endTimestamp: BigNumber;
        bidder: string;
        skatePercent: number;
        daoPercent: number;
        settled: boolean;
      }
    >;

    auctionCounter(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _value: BigNumber }>;

    baseAuctionTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    claimGnars(
      ogGnarIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createBid(
      gnarId: PromiseOrValue<BigNumberish>,
      skatePercent: PromiseOrValue<BigNumberish>,
      daoPercent: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dao(overrides?: CallOverrides): Promise<[string]>;

    gnars(overrides?: CallOverrides): Promise<[string]>;

    gnarsClaimedFor(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      _skate: PromiseOrValue<string>,
      _dao: PromiseOrValue<string>,
      _gnars: PromiseOrValue<string>,
      _weth: PromiseOrValue<string>,
      _reservePrice: PromiseOrValue<BigNumberish>,
      _minBidIncrementPercentage: PromiseOrValue<BigNumberish>,
      _baseAuctionTime: PromiseOrValue<BigNumberish>,
      _timeDoublingCount: PromiseOrValue<BigNumberish>,
      _timeBuffer: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    minBidIncrementPercentage(overrides?: CallOverrides): Promise<[number]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    remainingTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reservePrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    setMinBidIncrementPercentage(
      _minBidIncrementPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setReservePrice(
      _reservePrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSkateDaoAddresses(
      _skate: PromiseOrValue<string>,
      _dao: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTimeBuffer(
      _timeBuffer: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    settleAuction(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    settleCurrentAndCreateNewAuction(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    skate(overrides?: CallOverrides): Promise<[string]>;

    timeBuffer(overrides?: CallOverrides): Promise<[BigNumber]>;

    timeDoublingCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    weth(overrides?: CallOverrides): Promise<[string]>;
  };

  SKATE_OG_ADDRESS(overrides?: CallOverrides): Promise<string>;

  auction(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      number,
      number,
      boolean
    ] & {
      gnarId: BigNumber;
      amount: BigNumber;
      startTimestamp: BigNumber;
      endTimestamp: BigNumber;
      bidder: string;
      skatePercent: number;
      daoPercent: number;
      settled: boolean;
    }
  >;

  auctionCounter(overrides?: CallOverrides): Promise<BigNumber>;

  baseAuctionTime(overrides?: CallOverrides): Promise<BigNumber>;

  claimGnars(
    ogGnarIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createBid(
    gnarId: PromiseOrValue<BigNumberish>,
    skatePercent: PromiseOrValue<BigNumberish>,
    daoPercent: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dao(overrides?: CallOverrides): Promise<string>;

  gnars(overrides?: CallOverrides): Promise<string>;

  gnarsClaimedFor(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    _skate: PromiseOrValue<string>,
    _dao: PromiseOrValue<string>,
    _gnars: PromiseOrValue<string>,
    _weth: PromiseOrValue<string>,
    _reservePrice: PromiseOrValue<BigNumberish>,
    _minBidIncrementPercentage: PromiseOrValue<BigNumberish>,
    _baseAuctionTime: PromiseOrValue<BigNumberish>,
    _timeDoublingCount: PromiseOrValue<BigNumberish>,
    _timeBuffer: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  minBidIncrementPercentage(overrides?: CallOverrides): Promise<number>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  remainingTime(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reservePrice(overrides?: CallOverrides): Promise<BigNumber>;

  setMinBidIncrementPercentage(
    _minBidIncrementPercentage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setReservePrice(
    _reservePrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSkateDaoAddresses(
    _skate: PromiseOrValue<string>,
    _dao: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTimeBuffer(
    _timeBuffer: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  settleAuction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  settleCurrentAndCreateNewAuction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  skate(overrides?: CallOverrides): Promise<string>;

  timeBuffer(overrides?: CallOverrides): Promise<BigNumber>;

  timeDoublingCount(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  weth(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    SKATE_OG_ADDRESS(overrides?: CallOverrides): Promise<string>;

    auction(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        number,
        number,
        boolean
      ] & {
        gnarId: BigNumber;
        amount: BigNumber;
        startTimestamp: BigNumber;
        endTimestamp: BigNumber;
        bidder: string;
        skatePercent: number;
        daoPercent: number;
        settled: boolean;
      }
    >;

    auctionCounter(overrides?: CallOverrides): Promise<BigNumber>;

    baseAuctionTime(overrides?: CallOverrides): Promise<BigNumber>;

    claimGnars(
      ogGnarIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    createBid(
      gnarId: PromiseOrValue<BigNumberish>,
      skatePercent: PromiseOrValue<BigNumberish>,
      daoPercent: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    dao(overrides?: CallOverrides): Promise<string>;

    gnars(overrides?: CallOverrides): Promise<string>;

    gnarsClaimedFor(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _skate: PromiseOrValue<string>,
      _dao: PromiseOrValue<string>,
      _gnars: PromiseOrValue<string>,
      _weth: PromiseOrValue<string>,
      _reservePrice: PromiseOrValue<BigNumberish>,
      _minBidIncrementPercentage: PromiseOrValue<BigNumberish>,
      _baseAuctionTime: PromiseOrValue<BigNumberish>,
      _timeDoublingCount: PromiseOrValue<BigNumberish>,
      _timeBuffer: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    minBidIncrementPercentage(overrides?: CallOverrides): Promise<number>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    remainingTime(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    reservePrice(overrides?: CallOverrides): Promise<BigNumber>;

    setMinBidIncrementPercentage(
      _minBidIncrementPercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setReservePrice(
      _reservePrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSkateDaoAddresses(
      _skate: PromiseOrValue<string>,
      _dao: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTimeBuffer(
      _timeBuffer: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    settleAuction(overrides?: CallOverrides): Promise<void>;

    settleCurrentAndCreateNewAuction(overrides?: CallOverrides): Promise<void>;

    skate(overrides?: CallOverrides): Promise<string>;

    timeBuffer(overrides?: CallOverrides): Promise<BigNumber>;

    timeDoublingCount(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    weth(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "AuctionBid(uint256,address,uint256,uint256)"(
      gnarId?: PromiseOrValue<BigNumberish> | null,
      sender?: null,
      value?: null,
      timestamp?: null
    ): AuctionBidEventFilter;
    AuctionBid(
      gnarId?: PromiseOrValue<BigNumberish> | null,
      sender?: null,
      value?: null,
      timestamp?: null
    ): AuctionBidEventFilter;

    "AuctionCreated(uint256,uint256,uint256,uint256)"(
      gnarId?: PromiseOrValue<BigNumberish> | null,
      startTimestamp?: null,
      endTimestamp?: null,
      timestamp?: null
    ): AuctionCreatedEventFilter;
    AuctionCreated(
      gnarId?: PromiseOrValue<BigNumberish> | null,
      startTimestamp?: null,
      endTimestamp?: null,
      timestamp?: null
    ): AuctionCreatedEventFilter;

    "AuctionExtended(uint256,uint256)"(
      gnarId?: PromiseOrValue<BigNumberish> | null,
      endTime?: null
    ): AuctionExtendedEventFilter;
    AuctionExtended(
      gnarId?: PromiseOrValue<BigNumberish> | null,
      endTime?: null
    ): AuctionExtendedEventFilter;

    "AuctionMinBidIncrementPercentageUpdated(uint256)"(
      minBidIncrementPercentage?: null
    ): AuctionMinBidIncrementPercentageUpdatedEventFilter;
    AuctionMinBidIncrementPercentageUpdated(
      minBidIncrementPercentage?: null
    ): AuctionMinBidIncrementPercentageUpdatedEventFilter;

    "AuctionReservePriceUpdated(uint256)"(
      reservePrice?: null
    ): AuctionReservePriceUpdatedEventFilter;
    AuctionReservePriceUpdated(
      reservePrice?: null
    ): AuctionReservePriceUpdatedEventFilter;

    "AuctionSettled(uint256,address,uint256,uint256)"(
      gnarId?: PromiseOrValue<BigNumberish> | null,
      winner?: null,
      amount?: null,
      timestamp?: null
    ): AuctionSettledEventFilter;
    AuctionSettled(
      gnarId?: PromiseOrValue<BigNumberish> | null,
      winner?: null,
      amount?: null,
      timestamp?: null
    ): AuctionSettledEventFilter;

    "AuctionTimeBufferUpdated(uint256)"(
      timeBuffer?: null
    ): AuctionTimeBufferUpdatedEventFilter;
    AuctionTimeBufferUpdated(
      timeBuffer?: null
    ): AuctionTimeBufferUpdatedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;

    "OGGnarClaimed(uint256,uint256)"(
      ogGnarId?: PromiseOrValue<BigNumberish> | null,
      timestamp?: null
    ): OGGnarClaimedEventFilter;
    OGGnarClaimed(
      ogGnarId?: PromiseOrValue<BigNumberish> | null,
      timestamp?: null
    ): OGGnarClaimedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "SkateDaoAddressesUpdated(address,address)"(
      skate?: null,
      dao?: null
    ): SkateDaoAddressesUpdatedEventFilter;
    SkateDaoAddressesUpdated(
      skate?: null,
      dao?: null
    ): SkateDaoAddressesUpdatedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "Upgraded(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
  };

  estimateGas: {
    SKATE_OG_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    auction(overrides?: CallOverrides): Promise<BigNumber>;

    auctionCounter(overrides?: CallOverrides): Promise<BigNumber>;

    baseAuctionTime(overrides?: CallOverrides): Promise<BigNumber>;

    claimGnars(
      ogGnarIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createBid(
      gnarId: PromiseOrValue<BigNumberish>,
      skatePercent: PromiseOrValue<BigNumberish>,
      daoPercent: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dao(overrides?: CallOverrides): Promise<BigNumber>;

    gnars(overrides?: CallOverrides): Promise<BigNumber>;

    gnarsClaimedFor(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _skate: PromiseOrValue<string>,
      _dao: PromiseOrValue<string>,
      _gnars: PromiseOrValue<string>,
      _weth: PromiseOrValue<string>,
      _reservePrice: PromiseOrValue<BigNumberish>,
      _minBidIncrementPercentage: PromiseOrValue<BigNumberish>,
      _baseAuctionTime: PromiseOrValue<BigNumberish>,
      _timeDoublingCount: PromiseOrValue<BigNumberish>,
      _timeBuffer: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    minBidIncrementPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    remainingTime(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reservePrice(overrides?: CallOverrides): Promise<BigNumber>;

    setMinBidIncrementPercentage(
      _minBidIncrementPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setReservePrice(
      _reservePrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSkateDaoAddresses(
      _skate: PromiseOrValue<string>,
      _dao: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTimeBuffer(
      _timeBuffer: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    settleAuction(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    settleCurrentAndCreateNewAuction(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    skate(overrides?: CallOverrides): Promise<BigNumber>;

    timeBuffer(overrides?: CallOverrides): Promise<BigNumber>;

    timeDoublingCount(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    SKATE_OG_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    auction(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    auctionCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseAuctionTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimGnars(
      ogGnarIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createBid(
      gnarId: PromiseOrValue<BigNumberish>,
      skatePercent: PromiseOrValue<BigNumberish>,
      daoPercent: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dao(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gnars(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gnarsClaimedFor(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _skate: PromiseOrValue<string>,
      _dao: PromiseOrValue<string>,
      _gnars: PromiseOrValue<string>,
      _weth: PromiseOrValue<string>,
      _reservePrice: PromiseOrValue<BigNumberish>,
      _minBidIncrementPercentage: PromiseOrValue<BigNumberish>,
      _baseAuctionTime: PromiseOrValue<BigNumberish>,
      _timeDoublingCount: PromiseOrValue<BigNumberish>,
      _timeBuffer: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    minBidIncrementPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    remainingTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reservePrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setMinBidIncrementPercentage(
      _minBidIncrementPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setReservePrice(
      _reservePrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSkateDaoAddresses(
      _skate: PromiseOrValue<string>,
      _dao: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTimeBuffer(
      _timeBuffer: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    settleAuction(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    settleCurrentAndCreateNewAuction(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    skate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timeBuffer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timeDoublingCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
